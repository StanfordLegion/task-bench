#!/usr/bin/env bash
# DO NOT EDIT - This file was automatically generated.
UNAME=`uname -smp | sed -e 's/ /,/g'`
UNAMES=(${UNAME//,/ })
unset IS_CYGWIN; if [[ "$UNAME" = CYGWIN* ]]; then IS_CYGWIN=1; fi
FILE_SEP='/'; if [ -n "$IS_CYGWIN" ]; then FILE_SEP='\\'; fi
PATH_SEP=':'; if [ -n "$IS_CYGWIN" ]; then PATH_SEP=';'; fi

prog="$(readlink "$0" 2>&1)"
[ $? -eq 127 -o "$prog" = "" ] && prog="$0"
TOP="$(cd "$(dirname "$prog")/.." && pwd)"
if [ -n "$IS_CYGWIN" ]; then PATH="$PATH:$TOP/lib"; TOP="$(cygpath -am "$TOP")"; fi

[ -n "$JAVA_HOME" ] || JAVA_HOME='/opt/oracle/jdk1.8'
[ -n "$JRE_HOME" ] || JRE_HOME='/opt/oracle/jdk1.8.0_101/jre'
if [ -n "$IS_CYGWIN" ]; then JAVA_HOME="$(cygpath -am "$JAVA_HOME")"; JRE_HOME="$(cygpath -am "$JRE_HOME")"; fi
if [ -n "$JAVA_HOME" -a -e "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
    JAR="$JAVA_HOME/bin/jar"
elif [ -n "$JRE_HOME" -a -e "$JRE_HOME/bin/java" ]; then
    JAVA="$JRE_HOME/bin/java"
    JAR="$JRE_HOME/bin/jar"
else
    echo "JAVA_HOME ($JAVA_HOME) is not pointing to a JRE or a JDK"
    exit 1
fi
if [ -n "$IS_CYGWIN" ]; then JAVA="$(cygpath -au "$JAVA")"; JAR="$(cygpath -au "$JAR")"; fi

# NOTE: the above assumes that Cygwin==win32 (probably valid)

#CONFIG_FILE='standard.cfg'
LPG_JAR='lpg.jar'
ANTLR_JAR='antlr-runtime_4.5.0.201505151407.jar'
ECJ_JAR='ecj-4.4.2.jar'
HAZELCAST_JAR='hazelcast-3.7.1.jar'
HAZELCAST_CLIENT_JAR='hazelcast-client-3.7.1.jar'
SNAPPY_JAR='snappy-java.jar'
WALA_JAR='com.ibm.wala.cast.java_1.0.0.201101071300.jar'
WALA2_JAR='com.ibm.wala.cast_1.0.0.201101071300.jar'
WALA3_JAR='com.ibm.wala.core_1.1.3.201101071300.jar'
SHRIKE_JAR='com.ibm.wala.shrike_1.3.1.201101071300.jar'
MATH_JAR='commons-math3-3.5.jar'
LOG_JAR='commons-logging-1.2.jar'
LOGGING_PROPERTIES='logging.properties'
CROSS_COMPILE_BGQ='false'
CROSS_COMPILE_FX10='false'
CROSS_COMPILE_MODULES='false'
X10RT_PAMI_IS_DEFAULT='false'

help=""
time=""
verbose=""
extra_cp=""
ext=""
rtdev=""
java_args=""
args=""
optimize=""
optlevel=""
debug=""
flatexprs=""

if [ "$CROSS_COMPILE_BGQ" = "true" ]; then
    x10rt_impl="pami"
elif [ "$X10RT_PAMI_IS_DEFAULT" = "true" ]; then
    x10rt_impl="pami"
elif [ "$CROSS_COMPILE_MODULES" = "true" ]; then
    x10rt_impl="mpi"
else
    x10rt_impl="sockets"
fi

parse=true
while [ -n "$1" ]; do
    if [ -z "$parse" ]; then
        args="$args '$1'"
        shift
        continue
    fi
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -classpath|-cp) shift; extra_cp="$1";;
        -x10lib) shift; propfile="$(cd $(dirname "$1") && pwd)/$(basename "$1")"
                 [ -n "$IS_CYGWIN" ] && propfile="$(cygpath -am "$propfile")"
                 args="$args -x10lib '$propfile'";;
        -profile) profile="-Xrunhprof:cpu=samples";;
        -config) shift; config="$1.cfg";;
        -extclass) shift; ext=$1;;
        -x10rt) shift; x10rt_impl=$1;;
        -O|-optimize) optimize="true";;
        -O0) optimize="false"; optlevel="0";;
        -O1) optimize="true"; optlevel="1";;
        -O2) optimize="true"; optlevel="2";;
        -O3) optimize="true"; optlevel="3";;
        -O4) optimize="true"; optlevel="4";;
        -O5) optimize="true"; optlevel="5";;
        -g|-DEBUG) debug="true";;
        -DEBUG=*) debug='${1##-DEBUG=}';;
        -FLATTEN_EXPRESSIONS) flatexprs="true";;
        -FLATTEN_EXPRESSIONS=*) flatexprs='${1##-FLATTEN_EXPRESSIONS=}';;
        -rtdev) rtdev="true";;
        -J*) java_args="${java_args} '${1##-J}'";;
        --) parse=;;
        *) args="$args '$1'";;
    esac
    shift
done

if [ -n "$help" -o -z "$args" ]; then
    cat << EOF
Usage: x10c [options] <source-file>.x10 ...
where [options] includes:
    -sourcepath <path>       source path
    -classpath <path>        search path for class files
    -x10lib <lib.properties> use the precompiled x10 library described by <lib.properties>
    -buildx10lib <dir>       generate property file in <dir>
    -config <conf>           read configuration <conf> from etc${FILE_SEP}<conf>.cfg
    -version                 print version info
    -x10rt <impl>            select x10rt impl (sockets, standalone, pami, mpi)
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -disable <pass>          disable compiler pass <pass>
                             valid passes are: async-elimination
    -O -optimize             generate optimized code
    -O0                      generate unoptimized code
    -O1 -O2 -O3 -O4 -O5      generate optimized code and 
                               invoke post compiler at specified level
    -g                       generate debug information

    Use "x10c -- -help" to get more detailed help on compiler options
EOF
    exit 1
fi

[ -z "$DEXT" ] && DEXT="x10c.ExtensionInfo"
[ -z "$ext" ] && ext="$DEXT"

CONFIG_DIR="${TOP}${FILE_SEP}etc"
LIB_DIR="${TOP}${FILE_SEP}lib"
STDLIB_DIR="${TOP}${FILE_SEP}stdlib"

#[ -z "$config" ] && config="${CONFIG_FILE}"
[ -n "$config" ] && config="-Dx10.configuration=\"${CONFIG_DIR}${FILE_SEP}${config}\""

[ -n "$extra_cp" ] && args="$args -classpath \"${extra_cp}\""

WALA_JARS="${LIB_DIR}${FILE_SEP}${WALA_JAR}"
WALA_JARS="${WALA_JARS}${PATH_SEP}${LIB_DIR}${FILE_SEP}${WALA2_JAR}"
WALA_JARS="${WALA_JARS}${PATH_SEP}${LIB_DIR}${FILE_SEP}${WALA3_JAR}"
WALA_JARS="${WALA_JARS}${PATH_SEP}${LIB_DIR}${FILE_SEP}${SHRIKE_JAR}"
WALA_JARS="${WALA_JARS}${PATH_SEP}${LIB_DIR}${FILE_SEP}x10wala.jar"
WALA_JARS="${WALA_JARS}${PATH_SEP}${LIB_DIR}${FILE_SEP}org.eclipse.equinox.common_3.6.0.v20100503.jar"

classpath="${CP_OVERRIDE}"
if [[ "$DEXT" == "x10doc.ExtensionInfo" ]]; then
    classpath="${classpath}${LIB_DIR}${FILE_SEP}x10doc.jar${PATH_SEP}"
    [ -z "$TOOLSJAR" ] && TOOLSJAR="${JAVA_HOME}${FILE_SEP}lib${FILE_SEP}tools.jar"
    if [ -f "$TOOLSJAR" ]; then
        classpath="${classpath}${TOOLSJAR}${PATH_SEP}"
    else
        TOOLSJAR="${JRE_HOME}${FILE_SEP}..${FILE_SEP}lib${FILE_SEP}tools.jar"
        if [ -f "$TOOLSJAR" ]; then
            classpath="${classpath}${TOOLSJAR}${PATH_SEP}"
        else
            echo "Warning: x10doc requires javadoc framework in JDK"
        fi
    fi
fi

classpath="${classpath}${LIB_DIR}${FILE_SEP}x10c.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}${LPG_JAR}${PATH_SEP}${LIB_DIR}${FILE_SEP}${ANTLR_JAR}${PATH_SEP}${WALA_JARS}"
classpath="${classpath}${PATH_SEP}${LIB_DIR}${FILE_SEP}${MATH_JAR}${PATH_SEP}${LIB_DIR}${FILE_SEP}${LOG_JAR}"
classpath="${classpath}${PATH_SEP}${LIB_DIR}${FILE_SEP}${HAZELCAST_JAR}"

# Set flags to flatten expressions if we've been asked to do so.
[ "$CROSS_COMPILE_FX10" = "true" ] && flatexprs="true"
[ -n "$flatexprs" ] && args="-FLATTEN_EXPRESSIONS=$flatexprs $args"

# Set flags to generate optimized code if we've been asked to do so.
[ "$optimize" = "true" ] && args="-OPTIMIZE=true $args"
[ "$optlevel" != "" ] && args="-OPT_LEVEL=${optlevel} $args"

# Set flags to generate debug information if we've been asked to do so.
[ -n "$debug" ] && args="-DEBUG=$debug $args"

# include libx10.properties as a x10lib unless rtdev
[ -z "$rtdev" ] && args="-x10lib \"${STDLIB_DIR}/libx10.properties\" $args"

# define backend-specific macro
[ -z "$DDEF" ] && DDEF="__JAVA__"
args="-define $DDEF $args"

# pass x10rt_impl via environment variable
export X10RT_IMPL=$x10rt_impl

[ -z "$MAIN" ] && MAIN="polyglot.main.Main"

command="\"$JAVA\" -Xmx1024m -Xss2m -Dfile.encoding=UTF-8 -Dx10.dist=\"$TOP\" $config $profile -classpath \"$classpath\" ${java_args} $MAIN -extclass $ext $args"

[ -n "$verbose" ] && echo "$command"

eval "$time$command"
exit $?
