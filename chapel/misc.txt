

            // var currArray = get_from_grid(tasksGrird, i, dataSize);
            // writeln(currArray);
            // if (i == 1) { // first tasks 
            //   if (j != 1) { // if first step full send, if not we gotta wait
            //     writeln("waiting on task: ", i);
            //     // wait for the send
            //     (atomicCube[i][2][j-1]).waitFor(1);
            //     (atomicCube[i][3][j-1]).waitFor(1);
            //     // wait for the recieve 
            //     (atomicCube[i + 1][1][j-1]).waitFor(1); // after 
            //     writeln("done waiting on task: ", i);
            //   }
            //   var empty: [1..dataSize] int; // prev is empty
            //   var nextArray = get_from_grid(tasksGrird, i + 1, dataSize);
            //   add_to_cube(depenCube, empty, currArray, nextArray, 
            //     dataSize, numNeighbors, i);
            //   // update atmoic cube 
            //   (atomicCube[i][2][j]).write(1);
            //   (atomicCube[i][3][j]).write(1);
            // } else if (i == totalWidth) { // the last tasks 
            //   if (j != 1) {
            //     writeln("waiting on task: ", i);
            //     // wait for the send 
            //     (atomicCube[i][1][j-1]).waitFor(1);
            //     (atomicCube[i][2][j-1]).waitFor(1);
            //     // wait for the recive
            //     (atomicCube[i - 1][3][j-1]).waitFor(1); // before 
            //     writeln("done waiting on task: ", i);
            //   } 
            //   var prevArray = get_from_grid(tasksGrird, i - 1, dataSize);
            //   var empty: [1..dataSize] int; // next will be empty
            //   add_to_cube(depenCube, prevArray, currArray, empty,
            //    dataSize, numNeighbors, i);
            //   (atomicCube[i][1][j]).write(1);
            //   (atomicCube[i][2][j]).write(1);
            // } else { // middle nodes
            //   if (j != 1) {
            //     writeln("waiting on task: ", i);
            //     // wait for the send
            //     (atomicCube[i][1][j-1]).waitFor(1);
            //     (atomicCube[i][2][j-1]).waitFor(1);
            //     (atomicCube[i][3][j-1]).waitFor(1);
            //     // wait for the recieve 
            //     (atomicCube[i - 1][3][j-1]).waitFor(1); // before 
            //     (atomicCube[i + 1][1][j-1]).waitFor(1); // after
            //     writeln("done waiting on task: ", i);
            //   } 
            //   var prevArray = get_from_grid(tasksGrird, i - 1, dataSize);
            //   var nextArray = get_from_grid(tasksGrird, i + 1, dataSize);
            //   add_to_cube(depenCube, prevArray, currArray, nextArray, 
            //     dataSize, numNeighbors, i);
            //   (atomicCube[i][1][j]).write(1);
            //   (atomicCube[i][2][j]).write(1);
            //   (atomicCube[i][3][j]).write(1);
            // }
